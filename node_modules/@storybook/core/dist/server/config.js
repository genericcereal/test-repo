"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _path = _interopRequireDefault(require("path"));

var _nodeLogger = require("@storybook/node-logger");

var _presets = _interopRequireDefault(require("./presets"));

var _serverRequire = _interopRequireDefault(require("./serverRequire"));

function wrapCorePresets(presets) {
  return {
    babel: function babel(config, args) {
      return presets.apply('babel', config, args);
    },
    webpack: function webpack(config, args) {
      return presets.apply('webpack', config, args);
    },
    preview: function preview(config, args) {
      return presets.apply('preview', config, args);
    },
    manager: function manager(config, args) {
      return presets.apply('manager', config, args);
    }
  };
}

function customPreset(_ref) {
  var configDir = _ref.configDir;
  var presets = (0, _serverRequire.default)(_path.default.resolve(configDir, 'presets'));

  if (presets) {
    _nodeLogger.logger.warn('"Custom presets" is an experimental and undocumented feature that will be changed or deprecated soon. Use it on your own risk.');

    return presets;
  }

  return [];
}

function getWebpackConfig(options, presets) {
  var babelOptions = presets.babel({}, options);
  var entries = {
    iframe: presets.preview([], options),
    manager: presets.manager([], options)
  };
  return presets.webpack({}, (0, _objectSpread2.default)({}, options, {
    babelOptions: babelOptions,
    entries: entries
  }));
}

var _default = function _default(options) {
  var _options$corePresets = options.corePresets,
      corePresets = _options$corePresets === void 0 ? [] : _options$corePresets,
      _options$frameworkPre = options.frameworkPresets,
      frameworkPresets = _options$frameworkPre === void 0 ? [] : _options$frameworkPre,
      restOptions = (0, _objectWithoutProperties2.default)(options, ["corePresets", "frameworkPresets"]);
  var presetsConfig = (0, _toConsumableArray2.default)(corePresets).concat([require.resolve('./core-preset-babel-cache.js')], (0, _toConsumableArray2.default)(frameworkPresets), (0, _toConsumableArray2.default)(customPreset(options)), [require.resolve('./core-preset-webpack-custom.js')]);
  var presets = (0, _presets.default)(presetsConfig);
  return getWebpackConfig((0, _objectSpread2.default)({}, restOptions, {
    presets: presets
  }), wrapCorePresets(presets));
};

exports.default = _default;