"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _nodeLogger = require("@storybook/node-logger");

function interopRequireDefault(filePath) {
  // eslint-disable-next-line global-require,import/no-dynamic-require
  var result = require(filePath);

  var isES6DefaultExported = (0, _typeof2.default)(result) === 'object' && result !== null && typeof result.default !== 'undefined';
  return isES6DefaultExported ? result.default : result;
}

function loadPreset(preset) {
  try {
    if (typeof preset === 'string') {
      return {
        preset: interopRequireDefault(preset),
        options: {}
      };
    }

    var name = preset.name,
        options = preset.options;
    return {
      preset: interopRequireDefault(name),
      options: options
    };
  } catch (e) {
    _nodeLogger.logger.warn("  Failed to load preset: ".concat(JSON.stringify(preset)));

    return false;
  }
}

function loadPresets(presets) {
  if (!presets || !Array.isArray(presets) || !presets.length) {
    return [];
  }

  _nodeLogger.logger.info('=> Loading presets');

  return presets.map(loadPreset).filter(function (preset) {
    return preset;
  });
}

function applyPresets(presets, config) {
  var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var extension = arguments.length > 3 ? arguments[3] : undefined;

  if (!presets.length) {
    return config;
  }

  return presets.reduce(function (accumulatedConfig, _ref) {
    var preset = _ref.preset,
        options = _ref.options;
    var extensionFn = preset[extension];

    if (extensionFn && typeof extensionFn === 'function') {
      var combinedOptions = (0, _objectSpread2.default)({}, args, options);
      return extensionFn.call(preset, accumulatedConfig, combinedOptions);
    }

    return accumulatedConfig;
  }, config);
}

function getPresets(presets) {
  var loadedPresets = loadPresets(presets);
  return {
    babel: function babel(config, args) {
      return applyPresets(loadedPresets, config, args, 'babel');
    },
    webpack: function webpack(config, args) {
      return applyPresets(loadedPresets, config, args, 'webpack');
    },
    preview: function preview(config, args) {
      return applyPresets(loadedPresets, config, args, 'preview');
    },
    manager: function manager(config, args) {
      return applyPresets(loadedPresets, config, args, 'manager');
    }
  };
}

var _default = getPresets;
exports.default = _default;