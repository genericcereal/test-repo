"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildDev = buildDev;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _express = _interopRequireDefault(require("express"));

var _https = _interopRequireDefault(require("https"));

var _serveFavicon = _interopRequireDefault(require("serve-favicon"));

var _commander = _interopRequireDefault(require("commander"));

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _chalk = _interopRequireDefault(require("chalk"));

var _detectPort = _interopRequireDefault(require("detect-port"));

var _inquirer = _interopRequireDefault(require("inquirer"));

var _nodeLogger = require("@storybook/node-logger");

var _opn = _interopRequireDefault(require("opn"));

var _middleware = _interopRequireWildcard(require("./middleware"));

var _utils = require("./utils");

require("./config/env");

var defaultFavIcon = require.resolve('./public/favicon.ico');

var getFreePort = function getFreePort(port) {
  return (0, _detectPort.default)(port).catch(function (error) {
    _nodeLogger.logger.error(error);

    process.exit(-1);
  });
};

function buildDev(_x) {
  return _buildDev.apply(this, arguments);
}

function _buildDev() {
  _buildDev = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee(_ref) {
    var _server;

    var packageJson, loadOptions, port, _ref2, shouldChangePort, listenAddr, app, server, sslOptions, hasCustomFavicon, configDir, serverResolve, serverReject, serverListening, _ref3, _ref4, stats, proto, address;

    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            packageJson = _ref.packageJson, loadOptions = (0, _objectWithoutProperties2.default)(_ref, ["packageJson"]);
            process.env.NODE_ENV = process.env.NODE_ENV || 'development';

            _commander.default.version(packageJson.version).option('-p, --port [number]', 'Port to run Storybook', function (str) {
              return parseInt(str, 10);
            }).option('-h, --host [string]', 'Host to run Storybook').option('-s, --static-dir <dir-names>', 'Directory where to load static files from').option('-c, --config-dir [dir-name]', 'Directory where to load Storybook configurations from').option('--https', 'Serve Storybook over HTTPS. Note: You must provide your own certificate information.').option('--ssl-ca <ca>', 'Provide an SSL certificate authority. (Optional with --https, required if using a self-signed certificate)', _utils.parseList).option('--ssl-cert <cert>', 'Provide an SSL certificate. (Required with --https)').option('--ssl-key <key>', 'Provide an SSL key. (Required with --https)').option('--smoke-test', 'Exit after successful start').option('--ci', "CI mode (skip interactive prompts, don't open browser").option('--quiet', 'Suppress verbose build output').parse(process.argv);

            _nodeLogger.logger.info(_chalk.default.bold("".concat(packageJson.name, " v").concat(packageJson.version)) + _chalk.default.reset('\n')); // The key is the field created in `program` variable for
            // each command line argument. Value is the env variable.


            (0, _utils.getEnvConfig)(_commander.default, {
              port: 'SBCONFIG_PORT',
              host: 'SBCONFIG_HOSTNAME',
              staticDir: 'SBCONFIG_STATIC_DIR',
              configDir: 'SBCONFIG_CONFIG_DIR'
            });
            _context.next = 7;
            return getFreePort(_commander.default.port);

          case 7:
            port = _context.sent;

            if (!(!_commander.default.ci && !_commander.default.smokeTest && _commander.default.port != null && port !== _commander.default.port)) {
              _context.next = 14;
              break;
            }

            _context.next = 11;
            return _inquirer.default.prompt({
              type: 'confirm',
              default: true,
              name: 'shouldChangePort',
              message: "Port ".concat(_commander.default.port, " is not available.\nWould you like to run Storybook on port ").concat(port, " instead?")
            });

          case 11:
            _ref2 = _context.sent;
            shouldChangePort = _ref2.shouldChangePort;

            if (!shouldChangePort) {
              process.exit(1);
            }

          case 14:
            // Used with `app.listen` below
            listenAddr = [port];

            if (_commander.default.host) {
              listenAddr.push(_commander.default.host);
            }

            app = (0, _express.default)();
            server = app;

            if (_commander.default.https) {
              if (!_commander.default.sslCert) {
                _nodeLogger.logger.error('Error: --ssl-cert is required with --https');

                process.exit(-1);
              }

              if (!_commander.default.sslKey) {
                _nodeLogger.logger.error('Error: --ssl-key is required with --https');

                process.exit(-1);
              }

              sslOptions = {
                ca: (_commander.default.sslCa || []).map(function (ca) {
                  return _fs.default.readFileSync(ca, 'utf-8');
                }),
                cert: _fs.default.readFileSync(_commander.default.sslCert, 'utf-8'),
                key: _fs.default.readFileSync(_commander.default.sslKey, 'utf-8')
              };
              server = _https.default.createServer(sslOptions, app);
            }

            hasCustomFavicon = false;

            if (_commander.default.staticDir) {
              _commander.default.staticDir = (0, _utils.parseList)(_commander.default.staticDir);

              _commander.default.staticDir.forEach(function (dir) {
                var staticPath = _path.default.resolve(dir);

                if (!_fs.default.existsSync(staticPath)) {
                  _nodeLogger.logger.error("Error: no such directory to load static files: ".concat(staticPath));

                  process.exit(-1);
                }

                _nodeLogger.logger.info("=> Loading static files from: ".concat(staticPath, " ."));

                app.use(_express.default.static(staticPath, {
                  index: false
                }));

                var faviconPath = _path.default.resolve(staticPath, 'favicon.ico');

                if (_fs.default.existsSync(faviconPath)) {
                  hasCustomFavicon = true;
                  app.use((0, _serveFavicon.default)(faviconPath));
                }
              });
            }

            if (!hasCustomFavicon) {
              app.use((0, _serveFavicon.default)(defaultFavIcon));
            } // Build the webpack configuration using the `baseConfig`
            // custom `.babelrc` file and `webpack.config.js` files


            configDir = _commander.default.configDir || './.storybook'; // NOTE changes to env should be done before calling `getBaseConfig`
            // `getBaseConfig` function which is called inside the middleware

            app.use((0, _middleware.default)(configDir, loadOptions, _commander.default.quiet));

            serverResolve = function serverResolve() {};

            serverReject = function serverReject() {};

            serverListening = new Promise(function (resolve, reject) {
              serverResolve = resolve;
              serverReject = reject;
            });

            (_server = server).listen.apply(_server, listenAddr.concat([function (error) {
              if (error) {
                serverReject(error);
              } else {
                serverResolve();
              }
            }]));

            _context.prev = 28;
            _context.next = 31;
            return Promise.all([_middleware.webpackValid, serverListening]);

          case 31:
            _ref3 = _context.sent;
            _ref4 = (0, _slicedToArray2.default)(_ref3, 1);
            stats = _ref4[0];
            proto = _commander.default.https ? 'https' : 'http';
            address = "".concat(proto, "://").concat(_commander.default.host || 'localhost', ":").concat(port, "/");

            _nodeLogger.logger.info("Storybook started on => ".concat(_chalk.default.cyan(address), "\n"));

            if (_commander.default.smokeTest) {
              process.exit(stats.toJson().warnings.length ? 1 : 0);
            } else if (!_commander.default.ci) {
              (0, _opn.default)(address);
            }

            _context.next = 44;
            break;

          case 40:
            _context.prev = 40;
            _context.t0 = _context["catch"](28);

            if (_context.t0 instanceof Error) {
              _nodeLogger.logger.error(_context.t0);
            }

            if (_commander.default.smokeTest) {
              process.exit(1);
            }

          case 44:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[28, 40]]);
  }));
  return _buildDev.apply(this, arguments);
}