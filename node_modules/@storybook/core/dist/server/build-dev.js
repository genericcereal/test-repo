"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildDev = buildDev;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _express = _interopRequireDefault(require("express"));

var _https = _interopRequireDefault(require("https"));

var _serveFavicon = _interopRequireDefault(require("serve-favicon"));

var _commander = _interopRequireDefault(require("commander"));

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _chalk = _interopRequireDefault(require("chalk"));

var _nodeLogger = require("@storybook/node-logger");

var _middleware = _interopRequireWildcard(require("./middleware"));

var _utils = require("./utils");

require("./config/env");

var defaultFavIcon = require.resolve('./public/favicon.ico');

function buildDev(_ref) {
  var _server;

  var packageJson = _ref.packageJson,
      loadOptions = (0, _objectWithoutProperties2.default)(_ref, ["packageJson"]);
  process.env.NODE_ENV = process.env.NODE_ENV || 'development';

  _commander.default.version(packageJson.version).option('-p, --port [number]', 'Port to run Storybook (Required)', function (str) {
    return parseInt(str, 10);
  }).option('-h, --host [string]', 'Host to run Storybook').option('-s, --static-dir <dir-names>', 'Directory where to load static files from').option('-c, --config-dir [dir-name]', 'Directory where to load Storybook configurations from').option('--https', 'Serve Storybook over HTTPS. Note: You must provide your own certificate information.').option('--ssl-ca <ca>', 'Provide an SSL certificate authority. (Optional with --https, required if using a self-signed certificate)', _utils.parseList).option('--ssl-cert <cert>', 'Provide an SSL certificate. (Required with --https)').option('--ssl-key <key>', 'Provide an SSL key. (Required with --https)').option('--smoke-test', 'Exit after successful start').option('--quiet', 'Suppress verbose build output').parse(process.argv);

  _nodeLogger.logger.info(_chalk.default.bold("".concat(packageJson.name, " v").concat(packageJson.version)) + _chalk.default.reset('\n')); // The key is the field created in `program` variable for
  // each command line argument. Value is the env variable.


  (0, _utils.getEnvConfig)(_commander.default, {
    port: 'SBCONFIG_PORT',
    host: 'SBCONFIG_HOSTNAME',
    staticDir: 'SBCONFIG_STATIC_DIR',
    configDir: 'SBCONFIG_CONFIG_DIR'
  });

  if (!_commander.default.port) {
    _nodeLogger.logger.error('Error: port to run Storybook is required!\n');

    _commander.default.help();

    process.exit(-1);
  } // Used with `app.listen` below


  var listenAddr = [_commander.default.port];

  if (_commander.default.host) {
    listenAddr.push(_commander.default.host);
  }

  var app = (0, _express.default)();
  var server = app;

  if (_commander.default.https) {
    if (!_commander.default.sslCert) {
      _nodeLogger.logger.error('Error: --ssl-cert is required with --https');

      process.exit(-1);
    }

    if (!_commander.default.sslKey) {
      _nodeLogger.logger.error('Error: --ssl-key is required with --https');

      process.exit(-1);
    }

    var sslOptions = {
      ca: (_commander.default.sslCa || []).map(function (ca) {
        return _fs.default.readFileSync(ca, 'utf-8');
      }),
      cert: _fs.default.readFileSync(_commander.default.sslCert, 'utf-8'),
      key: _fs.default.readFileSync(_commander.default.sslKey, 'utf-8')
    };
    server = _https.default.createServer(sslOptions, app);
  }

  var hasCustomFavicon = false;

  if (_commander.default.staticDir) {
    _commander.default.staticDir = (0, _utils.parseList)(_commander.default.staticDir);

    _commander.default.staticDir.forEach(function (dir) {
      var staticPath = _path.default.resolve(dir);

      if (!_fs.default.existsSync(staticPath)) {
        _nodeLogger.logger.error("Error: no such directory to load static files: ".concat(staticPath));

        process.exit(-1);
      }

      _nodeLogger.logger.info("=> Loading static files from: ".concat(staticPath, " ."));

      app.use(_express.default.static(staticPath, {
        index: false
      }));

      var faviconPath = _path.default.resolve(staticPath, 'favicon.ico');

      if (_fs.default.existsSync(faviconPath)) {
        hasCustomFavicon = true;
        app.use((0, _serveFavicon.default)(faviconPath));
      }
    });
  }

  if (!hasCustomFavicon) {
    app.use((0, _serveFavicon.default)(defaultFavIcon));
  } // Build the webpack configuration using the `baseConfig`
  // custom `.babelrc` file and `webpack.config.js` files


  var configDir = _commander.default.configDir || './.storybook'; // NOTE changes to env should be done before calling `getBaseConfig`
  // `getBaseConfig` function which is called inside the middleware

  app.use((0, _middleware.default)(configDir, loadOptions, _commander.default.quiet));

  var serverResolve = function serverResolve() {};

  var serverReject = function serverReject() {};

  var serverListening = new Promise(function (resolve, reject) {
    serverResolve = resolve;
    serverReject = reject;
  });

  (_server = server).listen.apply(_server, listenAddr.concat([function (error) {
    if (error) {
      serverReject(error);
    } else {
      serverResolve();
    }
  }]));

  Promise.all([_middleware.webpackValid, serverListening]).then(function (_ref2) {
    var _ref3 = (0, _slicedToArray2.default)(_ref2, 1),
        stats = _ref3[0];

    var proto = _commander.default.https ? 'https' : 'http';
    var address = "".concat(proto, "://").concat(_commander.default.host || 'localhost', ":").concat(_commander.default.port, "/");

    _nodeLogger.logger.info("Storybook started on => ".concat(_chalk.default.cyan(address), "\n"));

    if (_commander.default.smokeTest) {
      process.exit(stats.toJson().warnings.length ? 1 : 0);
    }
  }).catch(function (error) {
    if (error instanceof Error) {
      _nodeLogger.logger.error(error);
    }

    if (_commander.default.smokeTest) {
      process.exit(1);
    }
  });
}