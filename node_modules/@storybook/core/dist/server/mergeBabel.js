"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _object = _interopRequireDefault(require("object.omit"));

var _deepmerge = _interopRequireDefault(require("deepmerge"));

var _babelCoreProxy = require("./babel-core-proxy");

/* eslint-disable no-param-reassign,no-shadow */
// https://github.com/neutrinojs/babel-merge
// we can't use this package because we need to have babel/core as a peer
function arrayMerge() {
  var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var overrides = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return (0, _toConsumableArray2.default)(new Set((0, _toConsumableArray2.default)(source).concat((0, _toConsumableArray2.default)(overrides))));
}

function mergeArray() {
  var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var overrides = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var resolve = arguments.length > 2 ? arguments[2] : undefined;
  var deepmergeOpts = arguments.length > 3 ? arguments[3] : undefined;
  return (0, _toConsumableArray2.default)(source).concat((0, _toConsumableArray2.default)(overrides)).reduce(function (reduction, override) {
    var overrideName = resolve(Array.isArray(override) ? override[0] : override);
    var overrideOptions = Array.isArray(override) ? override[1] || {} : {};
    var base = reduction.find(function (base) {
      var baseName = resolve(Array.isArray(base) ? base[0] : base);
      return baseName === overrideName || baseName.includes(overrideName);
    });
    var index = reduction.includes(base) ? reduction.indexOf(base) : reduction.length;
    var baseName = base ? resolve(Array.isArray(base) ? base[0] : base) : overrideName;
    var baseOptions = Array.isArray(base) ? base[1] : {};
    var options = (0, _deepmerge.default)(baseOptions, overrideOptions, (0, _objectSpread2.default)({
      arrayMerge: arrayMerge,
      isMergeableObject: function isMergeableObject(value) {
        return Array.isArray(value);
      }
    }, deepmergeOpts));
    reduction[index] = Object.keys(options).length ? [baseName, options] : baseName;
    return reduction;
  }, []);
}

function babelMerge() {
  var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var overrides = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var deepmergeOpts = arguments.length > 2 ? arguments[2] : undefined;
  var plugins = mergeArray(source.plugins, overrides.plugins, _babelCoreProxy.resolvePlugin, deepmergeOpts);
  var presets = mergeArray(source.presets, overrides.presets, _babelCoreProxy.resolvePreset, deepmergeOpts);
  var sourceEnv = source.env || {};
  var overridesEnv = overrides.env || {};
  return Object.assign(presets.length ? {
    presets: presets
  } : {}, plugins.length ? {
    plugins: plugins
  } : {}, _deepmerge.default.all([(0, _object.default)(source, ['plugins', 'presets', 'env']), (0, _object.default)(overrides, ['plugins', 'presets', 'env'])].concat((0, _toConsumableArray2.default)((0, _toConsumableArray2.default)(new Set((0, _toConsumableArray2.default)(Object.keys(sourceEnv)).concat((0, _toConsumableArray2.default)(Object.keys(overridesEnv))))).map(function (name) {
    return {
      env: (0, _defineProperty2.default)({}, name, babelMerge(sourceEnv[name], overridesEnv[name], deepmergeOpts))
    };
  }))), (0, _objectSpread2.default)({
    arrayMerge: arrayMerge
  }, deepmergeOpts)));
}

Object.defineProperty(babelMerge, 'all', {
  value: function value() {
    var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var deepmergeOpts = arguments.length > 1 ? arguments[1] : undefined;
    return values.reduce(function (acc, value) {
      if (value) {
        Object.assign(acc, babelMerge(acc, value, deepmergeOpts));
      }

      return acc;
    }, {});
  }
});
module.exports = babelMerge;