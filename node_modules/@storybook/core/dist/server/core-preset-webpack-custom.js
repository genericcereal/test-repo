"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.webpack = webpack;

var _nodeLogger = require("@storybook/node-logger");

var _loadCustomWebpackConfig = _interopRequireDefault(require("./loadCustomWebpackConfig"));

var _mergeConfigs = _interopRequireDefault(require("./mergeConfigs"));

var _webpackConfig = require("./config/webpack.config.default");

function informAboutCustomConfig(defaultConfigName) {
  if (!defaultConfigName) {
    _nodeLogger.logger.info('=> Using default webpack setup.');

    return;
  }

  _nodeLogger.logger.info("=> Using default webpack setup based on \"".concat(defaultConfigName, "\"."));
}

function webpack(config, _ref) {
  var configDir = _ref.configDir,
      configType = _ref.configType,
      defaultConfigName = _ref.defaultConfigName;
  var defaultConfig = (0, _webpackConfig.createDefaultWebpackConfig)(config); // Check whether user has a custom webpack config file and
  // return the (extended) base configuration if it's not available.

  var customConfig = (0, _loadCustomWebpackConfig.default)(configDir);

  if (customConfig === null) {
    informAboutCustomConfig(defaultConfigName);
    return defaultConfig;
  }

  if (typeof customConfig === 'function') {
    _nodeLogger.logger.info('=> Loading custom webpack config (full-control mode).');

    return customConfig(config, configType, defaultConfig);
  }

  _nodeLogger.logger.info('=> Loading custom webpack config (extending mode).');

  return (0, _mergeConfigs.default)(config, customConfig);
}