"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _mergeConfigs = _interopRequireDefault(require("./mergeConfigs"));

var config = {
  devtool: 'source-maps',
  entry: {
    bundle: 'index.js'
  },
  output: {
    filename: '[name].js'
  },
  module: {
    rules: ['r1', 'r2']
  },
  plugins: ['p1', 'p2'],
  resolve: {
    enforceModuleExtension: true,
    extensions: ['.js', '.json'],
    alias: {
      A1: 'src/B1',
      A2: 'src/B2'
    }
  }
};
describe('mergeConfigs', function () {
  it('merges two full configs in one', function () {
    var customConfig = {
      profile: true,
      entry: {
        bundle: 'should_not_be_merged.js'
      },
      output: {
        filename: 'should_not_be_merged.js'
      },
      module: {
        noParse: /jquery|lodash/,
        rules: ['r3', 'r4']
      },
      plugins: ['p3', 'p4'],
      resolve: {
        enforceExtension: false,
        extensions: ['.ts', '.tsx'],
        alias: {
          A3: 'src/B3',
          A4: 'src/B4'
        }
      }
    };
    var result = (0, _mergeConfigs.default)(config, customConfig);
    expect(result).toMatchSnapshot();
  });
  it('merges partial custom config', function () {
    var customConfig = {
      plugins: ['p3'],
      resolve: {
        extensions: ['.ts', '.tsx']
      }
    };
    var result = (0, _mergeConfigs.default)(config, customConfig);
    expect(result).toMatchSnapshot();
  });
  it('merges successfully if custom config is empty', function () {
    var customConfig = {};
    var result = (0, _mergeConfigs.default)(config, customConfig);
    expect(result).toMatchSnapshot();
  });
});