"use strict";

function wrapPreset(basePresets) {
  return {
    babel: function babel(config, args) {
      return basePresets.apply('babel', config, args);
    },
    webpack: function webpack(config, args) {
      return basePresets.apply('webpack', config, args);
    }
  };
}

function mockPreset(name, mockPresetObject) {
  jest.mock(name, function () {
    return mockPresetObject;
  }, {
    virtual: true
  });
}

describe('presets', function () {
  it('does not throw when there is no preset file', function () {
    var loadPresets = require.requireActual('./presets').default;

    var presets;
    expect(function () {
      presets = wrapPreset(loadPresets());
      presets.webpack();
      presets.babel();
    }).not.toThrow();
    expect(presets).toBeDefined();
  });
  it('does not throw when presets are empty', function () {
    var loadPresets = require.requireActual('./presets').default;

    var presets = wrapPreset(loadPresets([]));
    expect(function () {
      presets.webpack();
      presets.babel();
    }).not.toThrow();
  });
  it('does not throw when preset can not be loaded', function () {
    var loadPresets = require.requireActual('./presets').default;

    var presets = wrapPreset(loadPresets(['preset-foo']));
    expect(function () {
      presets.webpack({});
      presets.babel();
    }).not.toThrow();
  });
  it('loads  and applies presets when they are declared as a string', function () {
    var mockPresetFooExtendWebpack = jest.fn();
    var mockPresetBarExtendBabel = jest.fn();
    mockPreset('preset-foo', {
      webpack: mockPresetFooExtendWebpack
    });
    mockPreset('preset-bar', {
      babel: mockPresetBarExtendBabel
    });

    var loadPresets = require.requireActual('./presets').default;

    var presets = wrapPreset(loadPresets(['preset-foo', 'preset-bar']));
    expect(function () {
      presets.webpack();
      presets.babel();
    }).not.toThrow();
    expect(mockPresetFooExtendWebpack).toBeCalled();
    expect(mockPresetBarExtendBabel).toBeCalled();
  });
  it('loads  and applies presets when they are declared as an object without props', function () {
    var mockPresetFooExtendWebpack = jest.fn();
    var mockPresetBarExtendBabel = jest.fn();
    mockPreset('preset-foo', {
      webpack: mockPresetFooExtendWebpack
    });
    mockPreset('preset-bar', {
      babel: mockPresetBarExtendBabel
    });

    var loadPresets = require.requireActual('./presets').default;

    var presets = wrapPreset(loadPresets([{
      name: 'preset-foo'
    }, {
      name: 'preset-bar'
    }]));
    expect(function () {
      presets.webpack();
      presets.babel();
    }).not.toThrow();
    expect(mockPresetFooExtendWebpack).toBeCalled();
    expect(mockPresetBarExtendBabel).toBeCalled();
  });
  it('loads and applies presets when they are declared as an object with props', function () {
    var mockPresetFooExtendWebpack = jest.fn();
    var mockPresetBarExtendBabel = jest.fn();
    mockPreset('preset-foo', {
      webpack: mockPresetFooExtendWebpack
    });
    mockPreset('preset-bar', {
      babel: mockPresetBarExtendBabel
    });

    var loadPresets = require.requireActual('./presets').default;

    var presets = wrapPreset(loadPresets([{
      name: 'preset-foo',
      options: {
        foo: 1
      }
    }, {
      name: 'preset-bar',
      options: {
        bar: 'a'
      }
    }]));
    expect(function () {
      presets.webpack({});
      presets.babel({});
    }).not.toThrow();
    expect(mockPresetFooExtendWebpack).toBeCalledWith(expect.anything(), {
      foo: 1
    });
    expect(mockPresetBarExtendBabel).toBeCalledWith(expect.anything(), {
      bar: 'a'
    });
  });
  it('loads and applies  presets when they are declared as a string and as an object', function () {
    var mockPresetFooExtendWebpack = jest.fn();
    var mockPresetBarExtendBabel = jest.fn();
    mockPreset('preset-foo', {
      webpack: mockPresetFooExtendWebpack
    });
    mockPreset('preset-bar', {
      babel: mockPresetBarExtendBabel
    });

    var loadPresets = require.requireActual('./presets').default;

    var presets = wrapPreset(loadPresets(['preset-foo', {
      name: 'preset-bar',
      options: {
        bar: 'a'
      }
    }]));
    expect(function () {
      presets.webpack({});
      presets.babel({});
    }).not.toThrow();
    expect(mockPresetFooExtendWebpack).toBeCalled();
    expect(mockPresetBarExtendBabel).toBeCalledWith(expect.anything(), {
      bar: 'a'
    });
  });
  it('applies presets in chain', function () {
    var mockPresetFooExtendWebpack = jest.fn(function () {
      return {};
    });
    var mockPresetBarExtendWebpack = jest.fn(function () {
      return {};
    });
    mockPreset('preset-foo', {
      webpack: mockPresetFooExtendWebpack
    });
    mockPreset('preset-bar', {
      webpack: mockPresetBarExtendWebpack
    });

    var loadPresets = require.requireActual('./presets').default;

    var presets = wrapPreset(loadPresets(['preset-foo', {
      name: 'preset-bar',
      options: {
        bar: 'a'
      }
    }]));
    expect(function () {
      presets.webpack({});
      presets.babel();
    }).not.toThrow();
    expect(mockPresetFooExtendWebpack).toBeCalled();
    expect(mockPresetBarExtendWebpack).toBeCalledWith(expect.anything(), {
      bar: 'a'
    });
  });
  afterEach(function () {
    jest.resetModules();
  });
});