"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildStatic = buildStatic;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _webpack = _interopRequireDefault(require("webpack"));

var _commander = _interopRequireDefault(require("commander"));

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _chalk = _interopRequireDefault(require("chalk"));

var _shelljs = _interopRequireDefault(require("shelljs"));

var _nodeLogger = require("@storybook/node-logger");

var _utils = require("./utils");

require("./config/env");

var _config = _interopRequireDefault(require("./config"));

var defaultFavIcon = require.resolve('./public/favicon.ico');

function buildStatic(_ref) {
  var packageJson = _ref.packageJson,
      loadOptions = (0, _objectWithoutProperties2.default)(_ref, ["packageJson"]);
  process.env.NODE_ENV = process.env.NODE_ENV || 'production';

  _commander.default.version(packageJson.version).option('-s, --static-dir <dir-names>', 'Directory where to load static files from', _utils.parseList).option('-o, --output-dir [dir-name]', 'Directory where to store built files').option('-c, --config-dir [dir-name]', 'Directory where to load Storybook configurations from').option('-w, --watch', 'Enable watch mode').parse(process.argv);

  _nodeLogger.logger.info(_chalk.default.bold("".concat(packageJson.name, " v").concat(packageJson.version, "\n"))); // The key is the field created in `program` variable for
  // each command line argument. Value is the env variable.


  (0, _utils.getEnvConfig)(_commander.default, {
    staticDir: 'SBCONFIG_STATIC_DIR',
    outputDir: 'SBCONFIG_OUTPUT_DIR',
    configDir: 'SBCONFIG_CONFIG_DIR'
  });
  var configDir = _commander.default.configDir || './.storybook';
  var outputDir = _commander.default.outputDir || './storybook-static'; // create output directory if not exists

  _shelljs.default.mkdir('-p', _path.default.resolve(outputDir)); // clear the static dir


  _shelljs.default.rm('-rf', _path.default.resolve(outputDir, 'static'));

  _shelljs.default.cp(defaultFavIcon, outputDir); // Build the webpack configuration using the `baseConfig`
  // custom `.babelrc` file and `webpack.config.js` files
  // NOTE changes to env should be done before calling `getBaseConfig`


  var config = (0, _config.default)((0, _objectSpread2.default)({
    configType: 'PRODUCTION',
    corePresets: [require.resolve('./core-preset-prod.js')],
    configDir: configDir
  }, loadOptions));
  config.output.path = _path.default.resolve(outputDir); // copy all static files

  if (_commander.default.staticDir) {
    _commander.default.staticDir.forEach(function (dir) {
      if (!_fs.default.existsSync(dir)) {
        _nodeLogger.logger.error("Error: no such directory to load static files: ".concat(dir));

        process.exit(-1);
      }

      _nodeLogger.logger.info("=> Copying static files from: ".concat(dir));

      _shelljs.default.cp('-r', "".concat(dir, "/*"), outputDir);
    });
  } // compile all resources with webpack and write them to the disk.


  _nodeLogger.logger.info('Building storybook ...');

  var webpackCb = function webpackCb(err, stats) {
    if (err || stats.hasErrors()) {
      _nodeLogger.logger.error('Failed to build the storybook'); // eslint-disable-next-line no-unused-expressions


      err && _nodeLogger.logger.error(err.message); // eslint-disable-next-line no-unused-expressions

      stats && stats.hasErrors() && stats.toJson().errors.forEach(function (e) {
        return _nodeLogger.logger.error(e);
      });
      process.exitCode = 1;
    }

    _nodeLogger.logger.info('Building storybook completed.');
  };

  var compiler = (0, _webpack.default)(config);

  if (_commander.default.watch) {
    compiler.watch({}, webpackCb);
  } else {
    compiler.run(webpackCb);
  }
}