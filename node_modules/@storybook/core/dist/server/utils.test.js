"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _mockFs = _interopRequireDefault(require("mock-fs"));

var _utils = require("./utils");

var HEAD_HTML_CONTENTS = '<script>console.log("custom script!");</script>';
var BASE_HTML_CONTENTS = '<script>console.log("base script!");</script>';
describe('server.getPreviewHeadHtml', function () {
  describe('when .storybook/preview-head.html does not exist', function () {
    beforeEach(function () {
      var _mock;

      (0, _mockFs.default)((_mock = {}, (0, _defineProperty2.default)(_mock, "".concat(__dirname, "/templates/base-preview-head.html"), BASE_HTML_CONTENTS), (0, _defineProperty2.default)(_mock, "config", {}), _mock));
    });
    afterEach(function () {
      _mockFs.default.restore();
    });
    it('return an empty string', function () {
      var result = (0, _utils.getPreviewHeadHtml)('./config');
      expect(result).toEqual(BASE_HTML_CONTENTS);
    });
  });
  describe('when .storybook/preview-head.html exists', function () {
    beforeEach(function () {
      var _mock2;

      (0, _mockFs.default)((_mock2 = {}, (0, _defineProperty2.default)(_mock2, "".concat(__dirname, "/templates/base-preview-head.html"), BASE_HTML_CONTENTS), (0, _defineProperty2.default)(_mock2, "config", {
        'preview-head.html': HEAD_HTML_CONTENTS
      }), _mock2));
    });
    afterEach(function () {
      _mockFs.default.restore();
    });
    it('return the contents of the file', function () {
      var result = (0, _utils.getPreviewHeadHtml)('./config');
      expect(result).toEqual(BASE_HTML_CONTENTS + HEAD_HTML_CONTENTS);
    });
  });
});