"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _webpack = _interopRequireDefault(require("webpack"));

var _universalDotenv = require("universal-dotenv");

var _dotenvWebpack = _interopRequireDefault(require("dotenv-webpack"));

var _WatchMissingNodeModulesPlugin = _interopRequireDefault(require("react-dev-utils/WatchMissingNodeModulesPlugin"));

var _caseSensitivePathsWebpackPlugin = _interopRequireDefault(require("case-sensitive-paths-webpack-plugin"));

var _generatePageWebpackPlugin = _interopRequireDefault(require("generate-page-webpack-plugin"));

var _utils = require("./utils");

var _utils2 = require("../utils");

var _package = require("../../../package.json");

var _default = function _default(_ref) {
  var configDir = _ref.configDir,
      quiet = _ref.quiet,
      babelOptions = _ref.babelOptions,
      entries = _ref.entries;
  var entriesMeta = {
    iframe: {
      headHtmlSnippet: (0, _utils2.getPreviewHeadHtml)(configDir, process.env),
      bodyHtmlSnippet: (0, _utils2.getPreviewBodyHtml)()
    },
    manager: {
      headHtmlSnippet: (0, _utils2.getManagerHeadHtml)(configDir, process.env)
    }
  };
  return {
    mode: 'development',
    devtool: 'cheap-module-source-map',
    entry: entries,
    output: {
      path: _path.default.join(__dirname, 'dist'),
      filename: 'static/[name].bundle.js',
      // Here we set the publicPath to ''.
      // This allows us to deploy storybook into subpaths like GitHub pages.
      // This works with css and image loaders too.
      // This is working for storybook since, we don't use pushState urls and
      // relative URLs works always.
      publicPath: ''
    },
    plugins: [new _generatePageWebpackPlugin.default({
      template: require.resolve('../templates/index.html.ejs'),
      // eslint-disable-next-line global-require
      parser: require('ejs'),
      filename: function filename(entry) {
        return entry === 'manager' ? 'index' : entry;
      }
    }, {
      data: {
        version: _package.version
      },
      headHtmlSnippet: function headHtmlSnippet(entry) {
        return entriesMeta[entry] ? entriesMeta[entry].headHtmlSnippet : null;
      },
      bodyHtmlSnippet: function bodyHtmlSnippet(entry) {
        return entriesMeta[entry] ? entriesMeta[entry].bodyHtmlSnippet : null;
      }
    }), new _webpack.default.DefinePlugin((0, _utils.loadEnv)()), new _webpack.default.HotModuleReplacementPlugin(), new _caseSensitivePathsWebpackPlugin.default(), new _WatchMissingNodeModulesPlugin.default(_utils.nodeModulesPaths), quiet ? null : new _webpack.default.ProgressPlugin(), new _webpack.default.DefinePlugin((0, _universalDotenv.getEnvironment)().webpack), new _dotenvWebpack.default({
      silent: true
    })].filter(Boolean),
    module: {
      rules: [{
        test: /\.jsx?$/,
        use: [{
          loader: 'babel-loader',
          options: babelOptions
        }],
        include: _utils.includePaths,
        exclude: _utils.excludePaths
      }, {
        test: /\.md$/,
        use: [{
          loader: require.resolve('raw-loader')
        }]
      }]
    },
    resolve: {
      // Since we ship with json-loader always, it's better to move extensions to here
      // from the default config.
      extensions: ['.js', '.jsx', '.json'],
      // Add support to NODE_PATH. With this we could avoid relative path imports.
      // Based on this CRA feature: https://github.com/facebookincubator/create-react-app/issues/253
      modules: ['node_modules'].concat(_utils.nodePaths),
      alias: {
        '@babel/runtime': (0, _utils.getBabelRuntimePath)()
      }
    },
    performance: {
      hints: false
    }
  };
};

exports.default = _default;