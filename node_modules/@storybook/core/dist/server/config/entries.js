"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPreviewEntry = createPreviewEntry;
exports.createManagerEntry = createManagerEntry;

var _path = _interopRequireDefault(require("path"));

var _nodeLogger = require("@storybook/node-logger");

var _interpretFiles = require("../interpret-files");

function createPreviewEntry(_ref) {
  var configDir = _ref.configDir;
  var iframe = [require.resolve('./polyfills'), require.resolve('./globals')]; // Check whether a config.{ext} file exists inside the storybook
  // config directory and throw an error if it's not.

  var storybookConfigPath = (0, _interpretFiles.getInterpretedFile)(_path.default.resolve(configDir, 'config'));

  if (!storybookConfigPath) {
    throw new Error("=> Create a storybook config file in \"".concat(configDir, "/config.{ext}\"."));
  }

  iframe.push(require.resolve(storybookConfigPath));
  return iframe;
}

function createManagerEntry(_ref2) {
  var configDir = _ref2.configDir;
  var manager = [require.resolve('./polyfills'), require.resolve('../../client/manager')]; // Check whether addons.{ext} file exists inside the storybook.

  var storybookCustomAddonsPath = (0, _interpretFiles.getInterpretedFile)(_path.default.resolve(configDir, 'addons'));

  if (storybookCustomAddonsPath) {
    _nodeLogger.logger.info('=> Loading custom addons config.');

    manager.unshift(storybookCustomAddonsPath);
  }

  return manager;
}