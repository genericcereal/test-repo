"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.webpackValid = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _path = _interopRequireDefault(require("path"));

var _express = require("express");

var _webpack = _interopRequireDefault(require("webpack"));

var _webpackDevMiddleware = _interopRequireDefault(require("webpack-dev-middleware"));

var _webpackHotMiddleware = _interopRequireDefault(require("webpack-hot-middleware"));

var _utils = require("./utils");

var _config = _interopRequireDefault(require("./config"));

var webpackResolve = function webpackResolve() {};

var webpackReject = function webpackReject() {};

var webpackValid = new Promise(function (resolve, reject) {
  webpackResolve = resolve;
  webpackReject = reject;
});
exports.webpackValid = webpackValid;

function _default(configDir, loadOptions, quiet) {
  // Build the webpack configuration using the `getBaseConfig`
  // custom `.babelrc` file and `webpack.config.js` files
  var config = (0, _config.default)((0, _objectSpread2.default)({
    configType: 'DEVELOPMENT',
    corePresets: [require.resolve('./core-preset-dev.js')],
    configDir: configDir,
    quiet: quiet
  }, loadOptions));
  var middlewareFn = (0, _utils.getMiddleware)(configDir); // remove the leading '/'

  var publicPath = config.output.publicPath;

  if (publicPath[0] === '/') {
    publicPath = publicPath.slice(1);
  }

  var compiler = (0, _webpack.default)(config);
  var devMiddlewareOptions = (0, _objectSpread2.default)({
    noInfo: true,
    publicPath: config.output.publicPath,
    watchOptions: config.watchOptions || {}
  }, config.devServer);
  var router = new _express.Router();
  var webpackDevMiddlewareInstance = (0, _webpackDevMiddleware.default)(compiler, devMiddlewareOptions);
  router.use(webpackDevMiddlewareInstance);
  router.use((0, _webpackHotMiddleware.default)(compiler)); // custom middleware

  middlewareFn(router);
  webpackDevMiddlewareInstance.waitUntilValid(function (stats) {
    router.get('/', function (req, res) {
      res.set('Content-Type', 'text/html');
      res.sendFile(_path.default.join("".concat(__dirname, "/public/index.html")));
    });
    router.get('/iframe.html', function (req, res) {
      res.set('Content-Type', 'text/html');
      res.sendFile(_path.default.join("".concat(__dirname, "/public/iframe.html")));
    });

    if (stats.toJson().errors.length) {
      webpackReject(stats);
    } else {
      webpackResolve(stats);
    }
  });
  return router;
}