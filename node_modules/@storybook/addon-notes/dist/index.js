"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withMarkdownNotes = exports.withNotes = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _addons = _interopRequireWildcard(require("@storybook/addons"));

var _marked = _interopRequireDefault(require("marked"));

function renderMarkdown(text, options) {
  _marked.default.setOptions((0, _objectSpread2.default)({}, _marked.default.defaults, {
    options: options
  }));

  return (0, _marked.default)(text);
}

var withNotes = (0, _addons.makeDecorator)({
  name: 'withNotes',
  parameterName: 'notes',
  skipIfNoParametersOrOptions: true,
  allowDeprecatedUsage: true,
  wrapper: function wrapper(getStory, context, _ref) {
    var options = _ref.options,
        parameters = _ref.parameters;

    var channel = _addons.default.getChannel();

    var storyOptions = parameters || options;

    var _ref2 = typeof storyOptions === 'string' ? {
      text: storyOptions
    } : storyOptions,
        text = _ref2.text,
        markdown = _ref2.markdown,
        markdownOptions = _ref2.markdownOptions;

    if (!text && !markdown) {
      throw new Error('You must set of one of `text` or `markdown` on the `notes` parameter');
    }

    channel.emit('storybook/notes/add_notes', text || renderMarkdown(markdown, markdownOptions));
    return getStory(context);
  }
});
exports.withNotes = withNotes;

var withMarkdownNotes = function withMarkdownNotes(text, options) {
  return withNotes({
    markdown: text,
    markdownOptions: options
  });
};

exports.withMarkdownNotes = withMarkdownNotes;