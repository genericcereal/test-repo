"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Notes = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _addons = _interopRequireDefault(require("@storybook/addons"));

var _styled = _interopRequireDefault(require("@emotion/styled"));

var Panel =
/*#__PURE__*/
(0, _styled.default)("div", {
  target: "eap90390"
})({
  padding: 10,
  boxSizing: 'border-box',
  width: '100%'
});

var Notes =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(Notes, _React$Component);

  function Notes() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Notes);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Notes)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.state = {
      text: ''
    };
    _this.onAddNotes = _this.onAddNotes.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));
    return _this;
  }

  (0, _createClass2.default)(Notes, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var _this$props = this.props,
          channel = _this$props.channel,
          api = _this$props.api; // Listen to the notes and render it.

      channel.on('storybook/notes/add_notes', this.onAddNotes); // Clear the current notes on every story change.

      this.stopListeningOnStory = api.onStory(function () {
        _this2.onAddNotes('');
      });
    } // This is some cleanup tasks when the Notes panel is unmounting.

  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.stopListeningOnStory) {
        this.stopListeningOnStory();
      }

      this.unmounted = true;
      var channel = this.props.channel;
      channel.removeListener('storybook/notes/add_notes', this.onAddNotes);
    }
  }, {
    key: "onAddNotes",
    value: function onAddNotes(text) {
      this.setState({
        text: text
      });
    }
  }, {
    key: "render",
    value: function render() {
      var active = this.props.active;
      var text = this.state.text;
      var textAfterFormatted = text ? text.trim().replace(/(<\S+.*>)\n/g, '$1').replace(/\n/g, '<br />') : '';
      return active ? _react.default.createElement(Panel, {
        className: "addon-notes-container",
        dangerouslySetInnerHTML: {
          __html: textAfterFormatted
        }
      }) : null;
    }
  }]);
  return Notes;
}(_react.default.Component);

exports.Notes = Notes;
Notes.propTypes = {
  active: _propTypes.default.bool.isRequired,
  channel: _propTypes.default.shape({
    on: _propTypes.default.func,
    emit: _propTypes.default.func,
    removeListener: _propTypes.default.func
  }).isRequired,
  api: _propTypes.default.shape({
    onStory: _propTypes.default.func,
    getQueryParam: _propTypes.default.func,
    setQueryParams: _propTypes.default.func
  }).isRequired
};

_addons.default.register('storybook/notes', function (api) {
  var channel = _addons.default.getChannel();

  _addons.default.addPanel('storybook/notes/panel', {
    title: 'Notes',
    // eslint-disable-next-line react/prop-types
    render: function render(_ref) {
      var active = _ref.active;
      return _react.default.createElement(Notes, {
        channel: channel,
        api: api,
        active: active
      });
    }
  });
});