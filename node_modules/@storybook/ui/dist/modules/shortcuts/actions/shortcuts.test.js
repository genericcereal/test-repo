"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _shortcuts = _interopRequireDefault(require("./shortcuts"));

var MockClientStore =
/*#__PURE__*/
function () {
  function MockClientStore() {
    (0, _classCallCheck2.default)(this, MockClientStore);
  }

  (0, _createClass2.default)(MockClientStore, [{
    key: "update",
    value: function update(cb) {
      this.updateCallback = cb;
    }
  }]);
  return MockClientStore;
}();

describe('manager.shortcuts.actions.shortcuts', function () {
  describe('setOptions', function () {
    test('should update options', function () {
      var clientStore = new MockClientStore();

      _shortcuts.default.setOptions({
        clientStore: clientStore
      }, {
        abc: 10
      });

      var state = {
        shortcutOptions: {
          bbc: 50,
          abc: 40
        }
      };
      var stateUpdates = clientStore.updateCallback(state);
      expect(stateUpdates).toEqual({
        shortcutOptions: {
          bbc: 50,
          abc: 10
        }
      });
    });
    test('should only update options for the key already defined', function () {
      var clientStore = new MockClientStore();

      _shortcuts.default.setOptions({
        clientStore: clientStore
      }, {
        abc: 10,
        kki: 50
      });

      var state = {
        shortcutOptions: {
          bbc: 50,
          abc: 40
        }
      };
      var stateUpdates = clientStore.updateCallback(state);
      expect(stateUpdates).toEqual({
        shortcutOptions: {
          bbc: 50,
          abc: 10
        }
      });
    });
    test('should warn about deprecated option names', function () {
      var clientStore = new MockClientStore();
      var spy = jest.spyOn(console, 'warn').mockImplementation(function () {});

      _shortcuts.default.setOptions({
        clientStore: clientStore
      }, {
        showLeftPanel: 1,
        showDownPanel: 2,
        downPanelInRight: 3
      });

      var state = {
        shortcutOptions: {}
      };
      var stateUpdates = clientStore.updateCallback(state);
      expect(spy).toHaveBeenCalledTimes(3);
      expect(stateUpdates).toEqual({
        shortcutOptions: {
          showStoriesPanel: 1,
          showAddonPanel: 2,
          addonPanelInRight: 3
        }
      });
      spy.mockReset();
      spy.mockRestore();
    });
  });
});