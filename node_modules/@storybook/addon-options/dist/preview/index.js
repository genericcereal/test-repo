"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.init = init;
exports.withOptions = exports.setOptions = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _utilDeprecate = _interopRequireDefault(require("util-deprecate"));

var _addons = _interopRequireWildcard(require("@storybook/addons"));

var _shared = require("../shared");

// init function will be executed once when the storybook loads for the
// first time. This is a good place to add global listeners on channel.
function init() {// NOTE nothing to do here
}

function regExpStringify(exp) {
  if (typeof exp === 'string') return exp;
  if (Object.prototype.toString.call(exp) === '[object RegExp]') return exp.source;
  return null;
}

function hasOwnProp(object, propName) {
  return Object.prototype.hasOwnProperty.call(object, propName);
}

function withRegexProp(object, propName) {
  return hasOwnProp(object, propName) ? (0, _defineProperty2.default)({}, propName, regExpStringify(object[propName])) : {};
}

function emitOptions(options) {
  var channel = _addons.default.getChannel();

  if (!channel) {
    throw new Error('Failed to find addon channel. This may be due to https://github.com/storybooks/storybook/issues/1192.');
  } // since 'undefined' and 'null' are the valid values we don't want to
  // override the hierarchySeparator or hierarchyRootSeparator if the prop is missing


  channel.emit(_shared.EVENT_ID, {
    options: (0, _objectSpread2.default)({}, options, withRegexProp(options, 'hierarchySeparator'), withRegexProp(options, 'hierarchyRootSeparator'))
  });
} // setOptions function will send Storybook UI options when the channel is
// ready. If called before, options will be cached until it can be sent.


var globalOptions = {};
var setOptions = (0, _utilDeprecate.default)(function (options) {
  globalOptions = options;
  emitOptions(options);
}, '`setOptions(options)` is deprecated. Please use the `withOptions(options)` decorator globally.');
exports.setOptions = setOptions;
var withOptions = (0, _addons.makeDecorator)({
  name: 'withOptions',
  parameterName: 'options',
  skipIfNoParametersOrOptions: false,
  wrapper: function wrapper(getStory, context, _ref2) {
    var inputOptions = _ref2.options,
        parameters = _ref2.parameters;
    emitOptions((0, _objectSpread2.default)({}, globalOptions, inputOptions, parameters));
    return getStory(context);
  }
});
exports.withOptions = withOptions;