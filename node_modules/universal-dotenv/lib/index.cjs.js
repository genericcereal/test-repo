/*! universal-dotenv v1.9.0 by Sebastian Software <s.werner@sebastian-software.de> */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

require('core-js/modules/es6.array.iterator');
require('core-js/modules/es6.object.keys');
require('core-js/modules/web.dom.iterable');
require('core-js/modules/es6.array.for-each');
require('core-js/modules/es6.array.filter');
var fs = _interopDefault(require('fs'));
var path = _interopDefault(require('path'));
var appRoot = _interopDefault(require('app-root-dir'));

var dotEnvBase = path.join(appRoot.get(), ".env"),
    NODE_ENV = process.env.NODE_ENV,
    BUILD_TARGET = process.env.BUILD_TARGET,
    dotenvFiles = [BUILD_TARGET && NODE_ENV && dotEnvBase + "." + BUILD_TARGET + "." + NODE_ENV + ".local", BUILD_TARGET && NODE_ENV && dotEnvBase + "." + BUILD_TARGET + "." + NODE_ENV, BUILD_TARGET && NODE_ENV !== "test" && dotEnvBase + "." + BUILD_TARGET + ".local", BUILD_TARGET && dotEnvBase + "." + BUILD_TARGET, NODE_ENV && dotEnvBase + "." + NODE_ENV + ".local", NODE_ENV && dotEnvBase + "." + NODE_ENV, NODE_ENV !== "test" && dotEnvBase + ".local", dotEnvBase].filter(Boolean);
dotenvFiles.forEach(function (dotenvFile) {
  if (fs.existsSync(dotenvFile)) {
    require("dotenv-expand")(require("dotenv").config({
      path: dotenvFile
    }));
  }
});

if (process.env.APP_ROOT == null) {
  process.env.APP_ROOT = appRoot.get();
}

if (process.env.APP_SOURCE == null) {
  var sourceFolder = path.join(process.env.APP_ROOT, "src");
  process.env.APP_SOURCE = fs.existsSync(sourceFolder) ? sourceFolder : process.env.APP_ROOT;
}

var APP_SPECIFIC_ENV = /^APP_/i;
function getEnvironment() {
  var raw = {};
  Object.keys(process.env).filter(function (key) {
    return APP_SPECIFIC_ENV.test(key);
  }).forEach(function (key) {
    raw[key] = process.env[key];
  });
  raw.NODE_ENV = NODE_ENV || "development";

  if (BUILD_TARGET) {
    raw.BUILD_TARGET = BUILD_TARGET;
  }

  raw.APP_ROOT = process.env.APP_ROOT;
  raw.APP_SOURCE = process.env.APP_SOURCE;
  var stringified = {};
  Object.keys(raw).forEach(function (key) {
    stringified[key] = JSON.stringify(raw[key]);
  });
  return {
    raw: raw,
    stringified: stringified,
    webpack: {
      "process.env": stringified
    }
  };
}

exports.getEnvironment = getEnvironment;
//# sourceMappingURL=index.cjs.js.map
